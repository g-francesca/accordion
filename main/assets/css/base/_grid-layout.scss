:root {
  --container-padding: 25px;
  --grid-gap: 30px;
}

.container {
  width: calc(100% - 2*var(--container-padding));
  margin-left: auto;
  margin-right: auto;
}

// --------------------------------

// Grid system

// --------------------------------

$grid-columns: 12;

.grid {
  display: flex;
  flex-wrap: wrap;

  > * {
    flex-basis: 100%;
  }
}

.grid-gap {
  margin-bottom: calc(-1 * var(--grid-gap, 1em));
  margin-left: calc(-1 * var(--grid-gap, 1em));

  > * { 
    margin-bottom: var(--grid-gap, 1em); 
    margin-left: var(--grid-gap, 1em);
  }
}

@function round-width ($i) {
  //function used to round width to a number with 2 decimal places - used for IE fallback
  $width : floor(100% * $i * 100/ $grid-columns) / 100;
  @return $width;
}

@mixin autoSizedColumn {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

.col { // auto-sized column
  @include autoSizedColumn;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
    max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
  }
}

@include breakpoint(xs) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

@include breakpoint(sm) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm  {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

@include breakpoint(md) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

// --------------------------------

// CSS Grid Layout fallback

// --------------------------------

@mixin gridFallback($gap: null) {
  display: flex;
  flex-wrap: wrap;
  @if( $gap == null ) {
    $gap: var(--space-md);
  }

  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);

  > * {
    padding: #{$gap} 0 0 #{$gap};
    background-clip: content-box;
  }

  @supports (grid-area: auto) {
    margin: 0;

    > * {
      padding: 0;
      max-width: none!important;
    }
  }
}